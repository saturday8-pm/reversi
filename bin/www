#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('janken-game:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

var idData;
var player1 = null;
var player2 = null;

io.on('connection', function (socket) {

  //　自分のソケットIDを送信
  io.to(socket.id).emit('mySocketId', socket.id);


  // ユーザー名を受信
  socket.on('userName', function (userName) {
    var player = {
      id: socket.id,
      name: userName
    };

    if (player1 == null) {
      player1 = player;
    } else if (player2 == null) {
      player2 = player;
    }

    // 対戦プレイヤーのID情報
    idData = {
      1: player1,
      2: player2
    }

    //　全員に送信
    io.emit('idData', idData);
  });

  // ゲーム終了時
  socket.on('finish', function () {
    idData = {
      1: null,
      2: null
    };
    player1 = null;
    player2 = null;
    io.emit('finish');
    io.emit('idData', idData);
  });

  // チャットメッセージを送信
  socket.on('chat', function (chatdata) {
    console.log(chatdata);
    io.emit('chat', chatdata);
  });

  // オセロクリック時
  socket.on('data', function (data) {
    console.log(data);
    io.json.emit('clickData', {
      position: data,
      user: socket.id
    });
  });

  // 切断時
  socket.on('disconnect', function () {
    if (player1 != null && socket.id == player1['id']) {
      player1 = null;
    }
    if (player2 != null && socket.id == player2['id']) {
      player2 = null;
    }
    idData = {
      1: player1,
      2: player2
    }
    io.emit('idData', idData);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

